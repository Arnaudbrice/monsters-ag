{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","foundMonster","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6UAEaA,G,YAAK,SAACC,GACjB,OAAQ,yBAAKC,UAAU,kBACrB,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,SACnE,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,UCFTC,EAAW,SAACR,GACvB,OAAQ,yBAAKC,UAAU,aACnBD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,SCC5BS,G,MAAY,SAACZ,GAAD,OACzB,2BAAOC,UAAU,SAASY,KAAK,SAASC,YAAad,EAAMc,YAAaC,SAAUf,EAAMgB,iBC2CzEC,G,kBA9Cf,aAAe,IAAD,8BACd,+CAmBED,aAAa,SAACE,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAnBxC,EAAKC,MAAQ,CACbd,SAAU,GACVW,YAAa,IAJC,E,iFAQO,IAAD,OAKpBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAQ/B,IAAD,EACyBC,KAAKN,MAA/Bd,EADC,EACDA,SAAUW,EADT,EACSA,YAIZU,EAAerB,EAASsB,QAAO,SAAA5B,GAAO,OAAGA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBAG/F,OACA,yBAAK/B,UAAU,OACf,gDACE,kBAAC,EAAD,CAAWa,YAAY,iBAAiBE,aAAca,KAAKb,eACzD,kBAAC,EAAD,CAAUP,SAAUqB,GACjBD,KAAKN,MAAMd,SAASC,KAAI,SAAAP,GAAO,OAChC,wBAAIQ,IAAKR,EAAQC,IAAKD,EAAQG,e,GAtClB4B,IAAMC,Y,MCCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.5fa75a75.chunk.js","sourcesContent":["import React from 'react';\nimport \"./card.styles.css\"\nexport const Card=(props) => {\n  return (<div className=\"card-container\">\n    <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"robo\"/>\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>);\n}\n","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from \"../card/card.component\"\n\nexport const CardList = (props) => {\n  return (<div className=\"card-list\" >  \n     {props.monsters.map(monster => (    \n         <Card key={monster.id} monster={monster}/>   \n          ))}\n  </div>);\n}\n\n  \n ","import React from 'react';\nimport \"./search-box.styles.css\";\n\n// destructuring props in props={ placeholder, handleChange }()\n// functional component\n// export const SearchBox = ({ placeholder, handleChange }) => (\n// <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\n// to create following reusable component <SearchBox placeholder=... handleChange=... />\nexport const SearchBox = (props) => (\n<input className=\"search\" type=\"search\" placeholder={props.placeholder} onChange={props.handleChange} />\n\n);\n","import React from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\"\nimport \"./App.css\"\n\nclass App extends React.Component {\nconstructor() {\nsuper();\nthis.state = { //this is for the current component\nmonsters: [],\nsearchField: \"\"\n};\n\n}\ncomponentDidMount() {\n/*- fetch from this url\n-take the response and turn it to a json format\nconsisting of an Array of Object called users(users=response.json())\n-update the state */\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n.then(response => response.json()) \n.then(users => this.setState({ monsters: users }));\n\n}\n\n// render() is called everytime we update the state inside the return statement( this.setState({....}))\n  handleChange=(e)=>{\n    this.setState({searchField:e.target.value})\n  }\nrender() {\nconst { monsters, searchField } = this.state;\n/*-includes() can be used to compare strings or Array\n-for the beginning(for every monster) searchField=\"\"(foundMonster=monsters) that is why all monster are shown.\n-if I enter something inside the input, I will find out if this input is the same as a monster name */\nconst foundMonster = monsters.filter(monster =>monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n\nreturn (\n<div className=\"App\">\n<h1>Rolodex Monsters</h1>\n  <SearchBox placeholder=\"search Monster\" handleChange={this.handleChange} />\n    <CardList monsters={foundMonster}>\n      {this.state.monsters.map(monster => (\n      <h1 key={monster.id}>{monster.name}</h1>\n\n    ))}\n    </CardList>\n\n</div>\n);\n}\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}